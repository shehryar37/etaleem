#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eTaleem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="eTaleemDB")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblAssignment(tblAssignment instance);
    partial void UpdatetblAssignment(tblAssignment instance);
    partial void DeletetblAssignment(tblAssignment instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    partial void InserttblTeacher(tblTeacher instance);
    partial void UpdatetblTeacher(tblTeacher instance);
    partial void DeletetblTeacher(tblTeacher instance);
    partial void InserttblSubject(tblSubject instance);
    partial void UpdatetblSubject(tblSubject instance);
    partial void DeletetblSubject(tblSubject instance);
    partial void InserttblStudentSubject(tblStudentSubject instance);
    partial void UpdatetblStudentSubject(tblStudentSubject instance);
    partial void DeletetblStudentSubject(tblStudentSubject instance);
    partial void InserttblStudent(tblStudent instance);
    partial void UpdatetblStudent(tblStudent instance);
    partial void DeletetblStudent(tblStudent instance);
    partial void InserttblNotification(tblNotification instance);
    partial void UpdatetblNotification(tblNotification instance);
    partial void DeletetblNotification(tblNotification instance);
    partial void InserttblStudentAssignment(tblStudentAssignment instance);
    partial void UpdatetblStudentAssignment(tblStudentAssignment instance);
    partial void DeletetblStudentAssignment(tblStudentAssignment instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["eTaleemDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblAssignment> tblAssignments
		{
			get
			{
				return this.GetTable<tblAssignment>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		public System.Data.Linq.Table<tblTeacher> tblTeachers
		{
			get
			{
				return this.GetTable<tblTeacher>();
			}
		}
		
		public System.Data.Linq.Table<tblSubject> tblSubjects
		{
			get
			{
				return this.GetTable<tblSubject>();
			}
		}
		
		public System.Data.Linq.Table<tblStudentSubject> tblStudentSubjects
		{
			get
			{
				return this.GetTable<tblStudentSubject>();
			}
		}
		
		public System.Data.Linq.Table<tblStudent> tblStudents
		{
			get
			{
				return this.GetTable<tblStudent>();
			}
		}
		
		public System.Data.Linq.Table<tblNotification> tblNotifications
		{
			get
			{
				return this.GetTable<tblNotification>();
			}
		}
		
		public System.Data.Linq.Table<tblStudentAssignment> tblStudentAssignments
		{
			get
			{
				return this.GetTable<tblStudentAssignment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAssignment")]
	public partial class tblAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _assignmentID;
		
		private string _assignmentTitle;
		
		private string _assignmentQuestionStatement;
		
		private System.DateTime _assignmentStartDate;
		
		private System.DateTime _assignmentEndDate;
		
		private int _teacherID;
		
		private int _assignmentMaximumMarks;
		
		private bool _isGraded;
		
		private bool _isArchived;
		
		private string _fileName;
		
		private EntitySet<tblStudentAssignment> _tblStudentAssignments;
		
		private EntityRef<tblTeacher> _tblTeacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnassignmentIDChanging(int value);
    partial void OnassignmentIDChanged();
    partial void OnassignmentTitleChanging(string value);
    partial void OnassignmentTitleChanged();
    partial void OnassignmentQuestionStatementChanging(string value);
    partial void OnassignmentQuestionStatementChanged();
    partial void OnassignmentStartDateChanging(System.DateTime value);
    partial void OnassignmentStartDateChanged();
    partial void OnassignmentEndDateChanging(System.DateTime value);
    partial void OnassignmentEndDateChanged();
    partial void OnteacherIDChanging(int value);
    partial void OnteacherIDChanged();
    partial void OnassignmentMaximumMarksChanging(int value);
    partial void OnassignmentMaximumMarksChanged();
    partial void OnisGradedChanging(bool value);
    partial void OnisGradedChanged();
    partial void OnisArchivedChanging(bool value);
    partial void OnisArchivedChanged();
    partial void OnfileNameChanging(string value);
    partial void OnfileNameChanged();
    #endregion
		
		public tblAssignment()
		{
			this._tblStudentAssignments = new EntitySet<tblStudentAssignment>(new Action<tblStudentAssignment>(this.attach_tblStudentAssignments), new Action<tblStudentAssignment>(this.detach_tblStudentAssignments));
			this._tblTeacher = default(EntityRef<tblTeacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int assignmentID
		{
			get
			{
				return this._assignmentID;
			}
			set
			{
				if ((this._assignmentID != value))
				{
					this.OnassignmentIDChanging(value);
					this.SendPropertyChanging();
					this._assignmentID = value;
					this.SendPropertyChanged("assignmentID");
					this.OnassignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string assignmentTitle
		{
			get
			{
				return this._assignmentTitle;
			}
			set
			{
				if ((this._assignmentTitle != value))
				{
					this.OnassignmentTitleChanging(value);
					this.SendPropertyChanging();
					this._assignmentTitle = value;
					this.SendPropertyChanged("assignmentTitle");
					this.OnassignmentTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentQuestionStatement", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string assignmentQuestionStatement
		{
			get
			{
				return this._assignmentQuestionStatement;
			}
			set
			{
				if ((this._assignmentQuestionStatement != value))
				{
					this.OnassignmentQuestionStatementChanging(value);
					this.SendPropertyChanging();
					this._assignmentQuestionStatement = value;
					this.SendPropertyChanged("assignmentQuestionStatement");
					this.OnassignmentQuestionStatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentStartDate", DbType="Date NOT NULL")]
		public System.DateTime assignmentStartDate
		{
			get
			{
				return this._assignmentStartDate;
			}
			set
			{
				if ((this._assignmentStartDate != value))
				{
					this.OnassignmentStartDateChanging(value);
					this.SendPropertyChanging();
					this._assignmentStartDate = value;
					this.SendPropertyChanged("assignmentStartDate");
					this.OnassignmentStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentEndDate", DbType="Date NOT NULL")]
		public System.DateTime assignmentEndDate
		{
			get
			{
				return this._assignmentEndDate;
			}
			set
			{
				if ((this._assignmentEndDate != value))
				{
					this.OnassignmentEndDateChanging(value);
					this.SendPropertyChanging();
					this._assignmentEndDate = value;
					this.SendPropertyChanged("assignmentEndDate");
					this.OnassignmentEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="Int NOT NULL")]
		public int teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					if (this._tblTeacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentMaximumMarks", DbType="Int NOT NULL")]
		public int assignmentMaximumMarks
		{
			get
			{
				return this._assignmentMaximumMarks;
			}
			set
			{
				if ((this._assignmentMaximumMarks != value))
				{
					this.OnassignmentMaximumMarksChanging(value);
					this.SendPropertyChanging();
					this._assignmentMaximumMarks = value;
					this.SendPropertyChanged("assignmentMaximumMarks");
					this.OnassignmentMaximumMarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isGraded", DbType="Bit NOT NULL")]
		public bool isGraded
		{
			get
			{
				return this._isGraded;
			}
			set
			{
				if ((this._isGraded != value))
				{
					this.OnisGradedChanging(value);
					this.SendPropertyChanging();
					this._isGraded = value;
					this.SendPropertyChanged("isGraded");
					this.OnisGradedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isArchived", DbType="Bit NOT NULL")]
		public bool isArchived
		{
			get
			{
				return this._isArchived;
			}
			set
			{
				if ((this._isArchived != value))
				{
					this.OnisArchivedChanging(value);
					this.SendPropertyChanging();
					this._isArchived = value;
					this.SendPropertyChanged("isArchived");
					this.OnisArchivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileName", DbType="NVarChar(100)")]
		public string fileName
		{
			get
			{
				return this._fileName;
			}
			set
			{
				if ((this._fileName != value))
				{
					this.OnfileNameChanging(value);
					this.SendPropertyChanging();
					this._fileName = value;
					this.SendPropertyChanged("fileName");
					this.OnfileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAssignment_tblStudentAssignment", Storage="_tblStudentAssignments", ThisKey="assignmentID", OtherKey="assignmentID")]
		public EntitySet<tblStudentAssignment> tblStudentAssignments
		{
			get
			{
				return this._tblStudentAssignments;
			}
			set
			{
				this._tblStudentAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTeacher_tblAssignment", Storage="_tblTeacher", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true)]
		public tblTeacher tblTeacher
		{
			get
			{
				return this._tblTeacher.Entity;
			}
			set
			{
				tblTeacher previousValue = this._tblTeacher.Entity;
				if (((previousValue != value) 
							|| (this._tblTeacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTeacher.Entity = null;
						previousValue.tblAssignments.Remove(this);
					}
					this._tblTeacher.Entity = value;
					if ((value != null))
					{
						value.tblAssignments.Add(this);
						this._teacherID = value.teacherID;
					}
					else
					{
						this._teacherID = default(int);
					}
					this.SendPropertyChanged("tblTeacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblStudentAssignments(tblStudentAssignment entity)
		{
			this.SendPropertyChanging();
			entity.tblAssignment = this;
		}
		
		private void detach_tblStudentAssignments(tblStudentAssignment entity)
		{
			this.SendPropertyChanging();
			entity.tblAssignment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _userEmail;
		
		private string _userPassword;
		
		private char _userType;
		
		private EntitySet<tblTeacher> _tblTeachers;
		
		private EntitySet<tblStudent> _tblStudents;
		
		private EntitySet<tblNotification> _tblNotifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnuserEmailChanging(string value);
    partial void OnuserEmailChanged();
    partial void OnuserPasswordChanging(string value);
    partial void OnuserPasswordChanged();
    partial void OnuserTypeChanging(char value);
    partial void OnuserTypeChanged();
    #endregion
		
		public tblUser()
		{
			this._tblTeachers = new EntitySet<tblTeacher>(new Action<tblTeacher>(this.attach_tblTeachers), new Action<tblTeacher>(this.detach_tblTeachers));
			this._tblStudents = new EntitySet<tblStudent>(new Action<tblStudent>(this.attach_tblStudents), new Action<tblStudent>(this.detach_tblStudents));
			this._tblNotifications = new EntitySet<tblNotification>(new Action<tblNotification>(this.attach_tblNotifications), new Action<tblNotification>(this.detach_tblNotifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userEmail
		{
			get
			{
				return this._userEmail;
			}
			set
			{
				if ((this._userEmail != value))
				{
					this.OnuserEmailChanging(value);
					this.SendPropertyChanging();
					this._userEmail = value;
					this.SendPropertyChanged("userEmail");
					this.OnuserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userPassword
		{
			get
			{
				return this._userPassword;
			}
			set
			{
				if ((this._userPassword != value))
				{
					this.OnuserPasswordChanging(value);
					this.SendPropertyChanging();
					this._userPassword = value;
					this.SendPropertyChanged("userPassword");
					this.OnuserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userType", DbType="Char(1) NOT NULL")]
		public char userType
		{
			get
			{
				return this._userType;
			}
			set
			{
				if ((this._userType != value))
				{
					this.OnuserTypeChanging(value);
					this.SendPropertyChanging();
					this._userType = value;
					this.SendPropertyChanged("userType");
					this.OnuserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblTeacher", Storage="_tblTeachers", ThisKey="userID", OtherKey="userID")]
		public EntitySet<tblTeacher> tblTeachers
		{
			get
			{
				return this._tblTeachers;
			}
			set
			{
				this._tblTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblStudent", Storage="_tblStudents", ThisKey="userID", OtherKey="userID")]
		public EntitySet<tblStudent> tblStudents
		{
			get
			{
				return this._tblStudents;
			}
			set
			{
				this._tblStudents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblNotification", Storage="_tblNotifications", ThisKey="userID", OtherKey="userID")]
		public EntitySet<tblNotification> tblNotifications
		{
			get
			{
				return this._tblNotifications;
			}
			set
			{
				this._tblNotifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblTeachers(tblTeacher entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblTeachers(tblTeacher entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblStudents(tblStudent entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblStudents(tblStudent entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblNotifications(tblNotification entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblNotifications(tblNotification entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblTeacher")]
	public partial class tblTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _teacherID;
		
		private string _teacherFullName;
		
		private int _subjectCode;
		
		private int _userID;
		
		private EntitySet<tblAssignment> _tblAssignments;
		
		private EntitySet<tblStudentSubject> _tblStudentSubjects;
		
		private EntityRef<tblUser> _tblUser;
		
		private EntityRef<tblSubject> _tblSubject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteacherIDChanging(int value);
    partial void OnteacherIDChanged();
    partial void OnteacherFullNameChanging(string value);
    partial void OnteacherFullNameChanged();
    partial void OnsubjectCodeChanging(int value);
    partial void OnsubjectCodeChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    #endregion
		
		public tblTeacher()
		{
			this._tblAssignments = new EntitySet<tblAssignment>(new Action<tblAssignment>(this.attach_tblAssignments), new Action<tblAssignment>(this.detach_tblAssignments));
			this._tblStudentSubjects = new EntitySet<tblStudentSubject>(new Action<tblStudentSubject>(this.attach_tblStudentSubjects), new Action<tblStudentSubject>(this.detach_tblStudentSubjects));
			this._tblUser = default(EntityRef<tblUser>);
			this._tblSubject = default(EntityRef<tblSubject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherFullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string teacherFullName
		{
			get
			{
				return this._teacherFullName;
			}
			set
			{
				if ((this._teacherFullName != value))
				{
					this.OnteacherFullNameChanging(value);
					this.SendPropertyChanging();
					this._teacherFullName = value;
					this.SendPropertyChanged("teacherFullName");
					this.OnteacherFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectCode", DbType="Int NOT NULL")]
		public int subjectCode
		{
			get
			{
				return this._subjectCode;
			}
			set
			{
				if ((this._subjectCode != value))
				{
					if (this._tblSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectCodeChanging(value);
					this.SendPropertyChanging();
					this._subjectCode = value;
					this.SendPropertyChanged("subjectCode");
					this.OnsubjectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTeacher_tblAssignment", Storage="_tblAssignments", ThisKey="teacherID", OtherKey="teacherID")]
		public EntitySet<tblAssignment> tblAssignments
		{
			get
			{
				return this._tblAssignments;
			}
			set
			{
				this._tblAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTeacher_tblStudentSubject", Storage="_tblStudentSubjects", ThisKey="teacherID", OtherKey="teacherID")]
		public EntitySet<tblStudentSubject> tblStudentSubjects
		{
			get
			{
				return this._tblStudentSubjects;
			}
			set
			{
				this._tblStudentSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblTeacher", Storage="_tblUser", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblTeachers.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblTeachers.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubject_tblTeacher", Storage="_tblSubject", ThisKey="subjectCode", OtherKey="subjectCode", IsForeignKey=true)]
		public tblSubject tblSubject
		{
			get
			{
				return this._tblSubject.Entity;
			}
			set
			{
				tblSubject previousValue = this._tblSubject.Entity;
				if (((previousValue != value) 
							|| (this._tblSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSubject.Entity = null;
						previousValue.tblTeachers.Remove(this);
					}
					this._tblSubject.Entity = value;
					if ((value != null))
					{
						value.tblTeachers.Add(this);
						this._subjectCode = value.subjectCode;
					}
					else
					{
						this._subjectCode = default(int);
					}
					this.SendPropertyChanged("tblSubject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblAssignments(tblAssignment entity)
		{
			this.SendPropertyChanging();
			entity.tblTeacher = this;
		}
		
		private void detach_tblAssignments(tblAssignment entity)
		{
			this.SendPropertyChanging();
			entity.tblTeacher = null;
		}
		
		private void attach_tblStudentSubjects(tblStudentSubject entity)
		{
			this.SendPropertyChanging();
			entity.tblTeacher = this;
		}
		
		private void detach_tblStudentSubjects(tblStudentSubject entity)
		{
			this.SendPropertyChanging();
			entity.tblTeacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSubject")]
	public partial class tblSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subjectCode;
		
		private string _subjectTitle;
		
		private string _subjectGroup;
		
		private string _subjectDescription;
		
		private bool _isVisible;
		
		private EntitySet<tblTeacher> _tblTeachers;
		
		private EntitySet<tblStudentSubject> _tblStudentSubjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubjectCodeChanging(int value);
    partial void OnsubjectCodeChanged();
    partial void OnsubjectTitleChanging(string value);
    partial void OnsubjectTitleChanged();
    partial void OnsubjectGroupChanging(string value);
    partial void OnsubjectGroupChanged();
    partial void OnsubjectDescriptionChanging(string value);
    partial void OnsubjectDescriptionChanged();
    partial void OnisVisibleChanging(bool value);
    partial void OnisVisibleChanged();
    #endregion
		
		public tblSubject()
		{
			this._tblTeachers = new EntitySet<tblTeacher>(new Action<tblTeacher>(this.attach_tblTeachers), new Action<tblTeacher>(this.detach_tblTeachers));
			this._tblStudentSubjects = new EntitySet<tblStudentSubject>(new Action<tblStudentSubject>(this.attach_tblStudentSubjects), new Action<tblStudentSubject>(this.detach_tblStudentSubjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int subjectCode
		{
			get
			{
				return this._subjectCode;
			}
			set
			{
				if ((this._subjectCode != value))
				{
					this.OnsubjectCodeChanging(value);
					this.SendPropertyChanging();
					this._subjectCode = value;
					this.SendPropertyChanged("subjectCode");
					this.OnsubjectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string subjectTitle
		{
			get
			{
				return this._subjectTitle;
			}
			set
			{
				if ((this._subjectTitle != value))
				{
					this.OnsubjectTitleChanging(value);
					this.SendPropertyChanging();
					this._subjectTitle = value;
					this.SendPropertyChanged("subjectTitle");
					this.OnsubjectTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectGroup", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string subjectGroup
		{
			get
			{
				return this._subjectGroup;
			}
			set
			{
				if ((this._subjectGroup != value))
				{
					this.OnsubjectGroupChanging(value);
					this.SendPropertyChanging();
					this._subjectGroup = value;
					this.SendPropertyChanged("subjectGroup");
					this.OnsubjectGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectDescription", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string subjectDescription
		{
			get
			{
				return this._subjectDescription;
			}
			set
			{
				if ((this._subjectDescription != value))
				{
					this.OnsubjectDescriptionChanging(value);
					this.SendPropertyChanging();
					this._subjectDescription = value;
					this.SendPropertyChanged("subjectDescription");
					this.OnsubjectDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isVisible", DbType="Bit NOT NULL")]
		public bool isVisible
		{
			get
			{
				return this._isVisible;
			}
			set
			{
				if ((this._isVisible != value))
				{
					this.OnisVisibleChanging(value);
					this.SendPropertyChanging();
					this._isVisible = value;
					this.SendPropertyChanged("isVisible");
					this.OnisVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubject_tblTeacher", Storage="_tblTeachers", ThisKey="subjectCode", OtherKey="subjectCode")]
		public EntitySet<tblTeacher> tblTeachers
		{
			get
			{
				return this._tblTeachers;
			}
			set
			{
				this._tblTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubject_tblStudentSubject", Storage="_tblStudentSubjects", ThisKey="subjectCode", OtherKey="subjectCode")]
		public EntitySet<tblStudentSubject> tblStudentSubjects
		{
			get
			{
				return this._tblStudentSubjects;
			}
			set
			{
				this._tblStudentSubjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblTeachers(tblTeacher entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = this;
		}
		
		private void detach_tblTeachers(tblTeacher entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = null;
		}
		
		private void attach_tblStudentSubjects(tblStudentSubject entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = this;
		}
		
		private void detach_tblStudentSubjects(tblStudentSubject entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblStudentSubject")]
	public partial class tblStudentSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _studentSubjectID;
		
		private int _studentID;
		
		private int _subjectCode;
		
		private System.Nullable<int> _teacherID;
		
		private bool _isVisible;
		
		private string _joiningDate;
		
		private EntityRef<tblSubject> _tblSubject;
		
		private EntityRef<tblTeacher> _tblTeacher;
		
		private EntityRef<tblStudent> _tblStudent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentSubjectIDChanging(int value);
    partial void OnstudentSubjectIDChanged();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OnsubjectCodeChanging(int value);
    partial void OnsubjectCodeChanged();
    partial void OnteacherIDChanging(System.Nullable<int> value);
    partial void OnteacherIDChanged();
    partial void OnisVisibleChanging(bool value);
    partial void OnisVisibleChanged();
    partial void OnjoiningDateChanging(string value);
    partial void OnjoiningDateChanged();
    #endregion
		
		public tblStudentSubject()
		{
			this._tblSubject = default(EntityRef<tblSubject>);
			this._tblTeacher = default(EntityRef<tblTeacher>);
			this._tblStudent = default(EntityRef<tblStudent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentSubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int studentSubjectID
		{
			get
			{
				return this._studentSubjectID;
			}
			set
			{
				if ((this._studentSubjectID != value))
				{
					this.OnstudentSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._studentSubjectID = value;
					this.SendPropertyChanged("studentSubjectID");
					this.OnstudentSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="Int NOT NULL")]
		public int studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					if (this._tblStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectCode", DbType="Int NOT NULL")]
		public int subjectCode
		{
			get
			{
				return this._subjectCode;
			}
			set
			{
				if ((this._subjectCode != value))
				{
					if (this._tblSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectCodeChanging(value);
					this.SendPropertyChanging();
					this._subjectCode = value;
					this.SendPropertyChanged("subjectCode");
					this.OnsubjectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="Int")]
		public System.Nullable<int> teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					if (this._tblTeacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isVisible", DbType="Bit NOT NULL")]
		public bool isVisible
		{
			get
			{
				return this._isVisible;
			}
			set
			{
				if ((this._isVisible != value))
				{
					this.OnisVisibleChanging(value);
					this.SendPropertyChanging();
					this._isVisible = value;
					this.SendPropertyChanged("isVisible");
					this.OnisVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_joiningDate", DbType="NVarChar(50)")]
		public string joiningDate
		{
			get
			{
				return this._joiningDate;
			}
			set
			{
				if ((this._joiningDate != value))
				{
					this.OnjoiningDateChanging(value);
					this.SendPropertyChanging();
					this._joiningDate = value;
					this.SendPropertyChanged("joiningDate");
					this.OnjoiningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubject_tblStudentSubject", Storage="_tblSubject", ThisKey="subjectCode", OtherKey="subjectCode", IsForeignKey=true)]
		public tblSubject tblSubject
		{
			get
			{
				return this._tblSubject.Entity;
			}
			set
			{
				tblSubject previousValue = this._tblSubject.Entity;
				if (((previousValue != value) 
							|| (this._tblSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSubject.Entity = null;
						previousValue.tblStudentSubjects.Remove(this);
					}
					this._tblSubject.Entity = value;
					if ((value != null))
					{
						value.tblStudentSubjects.Add(this);
						this._subjectCode = value.subjectCode;
					}
					else
					{
						this._subjectCode = default(int);
					}
					this.SendPropertyChanged("tblSubject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTeacher_tblStudentSubject", Storage="_tblTeacher", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true)]
		public tblTeacher tblTeacher
		{
			get
			{
				return this._tblTeacher.Entity;
			}
			set
			{
				tblTeacher previousValue = this._tblTeacher.Entity;
				if (((previousValue != value) 
							|| (this._tblTeacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTeacher.Entity = null;
						previousValue.tblStudentSubjects.Remove(this);
					}
					this._tblTeacher.Entity = value;
					if ((value != null))
					{
						value.tblStudentSubjects.Add(this);
						this._teacherID = value.teacherID;
					}
					else
					{
						this._teacherID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblTeacher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStudent_tblStudentSubject", Storage="_tblStudent", ThisKey="studentID", OtherKey="studentID", IsForeignKey=true)]
		public tblStudent tblStudent
		{
			get
			{
				return this._tblStudent.Entity;
			}
			set
			{
				tblStudent previousValue = this._tblStudent.Entity;
				if (((previousValue != value) 
							|| (this._tblStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStudent.Entity = null;
						previousValue.tblStudentSubjects.Remove(this);
					}
					this._tblStudent.Entity = value;
					if ((value != null))
					{
						value.tblStudentSubjects.Add(this);
						this._studentID = value.studentID;
					}
					else
					{
						this._studentID = default(int);
					}
					this.SendPropertyChanged("tblStudent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblStudent")]
	public partial class tblStudent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _studentID;
		
		private string _studentFullName;
		
		private int _userID;
		
		private EntitySet<tblStudentSubject> _tblStudentSubjects;
		
		private EntitySet<tblStudentAssignment> _tblStudentAssignments;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OnstudentFullNameChanging(string value);
    partial void OnstudentFullNameChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    #endregion
		
		public tblStudent()
		{
			this._tblStudentSubjects = new EntitySet<tblStudentSubject>(new Action<tblStudentSubject>(this.attach_tblStudentSubjects), new Action<tblStudentSubject>(this.detach_tblStudentSubjects));
			this._tblStudentAssignments = new EntitySet<tblStudentAssignment>(new Action<tblStudentAssignment>(this.attach_tblStudentAssignments), new Action<tblStudentAssignment>(this.detach_tblStudentAssignments));
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentFullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string studentFullName
		{
			get
			{
				return this._studentFullName;
			}
			set
			{
				if ((this._studentFullName != value))
				{
					this.OnstudentFullNameChanging(value);
					this.SendPropertyChanging();
					this._studentFullName = value;
					this.SendPropertyChanged("studentFullName");
					this.OnstudentFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStudent_tblStudentSubject", Storage="_tblStudentSubjects", ThisKey="studentID", OtherKey="studentID")]
		public EntitySet<tblStudentSubject> tblStudentSubjects
		{
			get
			{
				return this._tblStudentSubjects;
			}
			set
			{
				this._tblStudentSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStudent_tblStudentAssignment", Storage="_tblStudentAssignments", ThisKey="studentID", OtherKey="studentID")]
		public EntitySet<tblStudentAssignment> tblStudentAssignments
		{
			get
			{
				return this._tblStudentAssignments;
			}
			set
			{
				this._tblStudentAssignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblStudent", Storage="_tblUser", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblStudents.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblStudents.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblStudentSubjects(tblStudentSubject entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = this;
		}
		
		private void detach_tblStudentSubjects(tblStudentSubject entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = null;
		}
		
		private void attach_tblStudentAssignments(tblStudentAssignment entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = this;
		}
		
		private void detach_tblStudentAssignments(tblStudentAssignment entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblNotification")]
	public partial class tblNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _notificationID;
		
		private string _notificationMessage;
		
		private int _userID;
		
		private System.DateTime _notificationDateTime;
		
		private string _notificationType;
		
		private string _notificationLink;
		
		private System.Nullable<bool> _isSeen;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnotificationIDChanging(int value);
    partial void OnnotificationIDChanged();
    partial void OnnotificationMessageChanging(string value);
    partial void OnnotificationMessageChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnnotificationDateTimeChanging(System.DateTime value);
    partial void OnnotificationDateTimeChanged();
    partial void OnnotificationTypeChanging(string value);
    partial void OnnotificationTypeChanged();
    partial void OnnotificationLinkChanging(string value);
    partial void OnnotificationLinkChanged();
    partial void OnisSeenChanging(System.Nullable<bool> value);
    partial void OnisSeenChanged();
    #endregion
		
		public tblNotification()
		{
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int notificationID
		{
			get
			{
				return this._notificationID;
			}
			set
			{
				if ((this._notificationID != value))
				{
					this.OnnotificationIDChanging(value);
					this.SendPropertyChanging();
					this._notificationID = value;
					this.SendPropertyChanged("notificationID");
					this.OnnotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationMessage", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string notificationMessage
		{
			get
			{
				return this._notificationMessage;
			}
			set
			{
				if ((this._notificationMessage != value))
				{
					this.OnnotificationMessageChanging(value);
					this.SendPropertyChanging();
					this._notificationMessage = value;
					this.SendPropertyChanged("notificationMessage");
					this.OnnotificationMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime notificationDateTime
		{
			get
			{
				return this._notificationDateTime;
			}
			set
			{
				if ((this._notificationDateTime != value))
				{
					this.OnnotificationDateTimeChanging(value);
					this.SendPropertyChanging();
					this._notificationDateTime = value;
					this.SendPropertyChanged("notificationDateTime");
					this.OnnotificationDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationType", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string notificationType
		{
			get
			{
				return this._notificationType;
			}
			set
			{
				if ((this._notificationType != value))
				{
					this.OnnotificationTypeChanging(value);
					this.SendPropertyChanging();
					this._notificationType = value;
					this.SendPropertyChanged("notificationType");
					this.OnnotificationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notificationLink", DbType="NVarChar(50)")]
		public string notificationLink
		{
			get
			{
				return this._notificationLink;
			}
			set
			{
				if ((this._notificationLink != value))
				{
					this.OnnotificationLinkChanging(value);
					this.SendPropertyChanging();
					this._notificationLink = value;
					this.SendPropertyChanged("notificationLink");
					this.OnnotificationLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSeen", DbType="Bit")]
		public System.Nullable<bool> isSeen
		{
			get
			{
				return this._isSeen;
			}
			set
			{
				if ((this._isSeen != value))
				{
					this.OnisSeenChanging(value);
					this.SendPropertyChanging();
					this._isSeen = value;
					this.SendPropertyChanged("isSeen");
					this.OnisSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblNotification", Storage="_tblUser", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblNotifications.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblNotifications.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblStudentAssignment")]
	public partial class tblStudentAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _studentAssignmentID;
		
		private int _assignmentID;
		
		private bool _studentAssignmentStatus;
		
		private System.Nullable<int> _studentAssignmentMarks;
		
		private string _studentAssignmentAnswer;
		
		private int _studentID;
		
		private EntityRef<tblAssignment> _tblAssignment;
		
		private EntityRef<tblStudent> _tblStudent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentAssignmentIDChanging(int value);
    partial void OnstudentAssignmentIDChanged();
    partial void OnassignmentIDChanging(int value);
    partial void OnassignmentIDChanged();
    partial void OnstudentAssignmentStatusChanging(bool value);
    partial void OnstudentAssignmentStatusChanged();
    partial void OnstudentAssignmentMarksChanging(System.Nullable<int> value);
    partial void OnstudentAssignmentMarksChanged();
    partial void OnstudentAssignmentAnswerChanging(string value);
    partial void OnstudentAssignmentAnswerChanged();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    #endregion
		
		public tblStudentAssignment()
		{
			this._tblAssignment = default(EntityRef<tblAssignment>);
			this._tblStudent = default(EntityRef<tblStudent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentAssignmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int studentAssignmentID
		{
			get
			{
				return this._studentAssignmentID;
			}
			set
			{
				if ((this._studentAssignmentID != value))
				{
					this.OnstudentAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._studentAssignmentID = value;
					this.SendPropertyChanged("studentAssignmentID");
					this.OnstudentAssignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignmentID", DbType="Int NOT NULL")]
		public int assignmentID
		{
			get
			{
				return this._assignmentID;
			}
			set
			{
				if ((this._assignmentID != value))
				{
					if (this._tblAssignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassignmentIDChanging(value);
					this.SendPropertyChanging();
					this._assignmentID = value;
					this.SendPropertyChanged("assignmentID");
					this.OnassignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentAssignmentStatus", DbType="Bit NOT NULL")]
		public bool studentAssignmentStatus
		{
			get
			{
				return this._studentAssignmentStatus;
			}
			set
			{
				if ((this._studentAssignmentStatus != value))
				{
					this.OnstudentAssignmentStatusChanging(value);
					this.SendPropertyChanging();
					this._studentAssignmentStatus = value;
					this.SendPropertyChanged("studentAssignmentStatus");
					this.OnstudentAssignmentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentAssignmentMarks", DbType="Int")]
		public System.Nullable<int> studentAssignmentMarks
		{
			get
			{
				return this._studentAssignmentMarks;
			}
			set
			{
				if ((this._studentAssignmentMarks != value))
				{
					this.OnstudentAssignmentMarksChanging(value);
					this.SendPropertyChanging();
					this._studentAssignmentMarks = value;
					this.SendPropertyChanged("studentAssignmentMarks");
					this.OnstudentAssignmentMarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentAssignmentAnswer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string studentAssignmentAnswer
		{
			get
			{
				return this._studentAssignmentAnswer;
			}
			set
			{
				if ((this._studentAssignmentAnswer != value))
				{
					this.OnstudentAssignmentAnswerChanging(value);
					this.SendPropertyChanging();
					this._studentAssignmentAnswer = value;
					this.SendPropertyChanged("studentAssignmentAnswer");
					this.OnstudentAssignmentAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="Int NOT NULL")]
		public int studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					if (this._tblStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAssignment_tblStudentAssignment", Storage="_tblAssignment", ThisKey="assignmentID", OtherKey="assignmentID", IsForeignKey=true)]
		public tblAssignment tblAssignment
		{
			get
			{
				return this._tblAssignment.Entity;
			}
			set
			{
				tblAssignment previousValue = this._tblAssignment.Entity;
				if (((previousValue != value) 
							|| (this._tblAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAssignment.Entity = null;
						previousValue.tblStudentAssignments.Remove(this);
					}
					this._tblAssignment.Entity = value;
					if ((value != null))
					{
						value.tblStudentAssignments.Add(this);
						this._assignmentID = value.assignmentID;
					}
					else
					{
						this._assignmentID = default(int);
					}
					this.SendPropertyChanged("tblAssignment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStudent_tblStudentAssignment", Storage="_tblStudent", ThisKey="studentID", OtherKey="studentID", IsForeignKey=true)]
		public tblStudent tblStudent
		{
			get
			{
				return this._tblStudent.Entity;
			}
			set
			{
				tblStudent previousValue = this._tblStudent.Entity;
				if (((previousValue != value) 
							|| (this._tblStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStudent.Entity = null;
						previousValue.tblStudentAssignments.Remove(this);
					}
					this._tblStudent.Entity = value;
					if ((value != null))
					{
						value.tblStudentAssignments.Add(this);
						this._studentID = value.studentID;
					}
					else
					{
						this._studentID = default(int);
					}
					this.SendPropertyChanged("tblStudent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
